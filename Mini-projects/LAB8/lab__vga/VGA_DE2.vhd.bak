library ieee;
use ieee.std_logic_1164.all;

entity vga is
	port(
		CLOCK_50 :IN std_logic;						--	50 MHz
		reset:IN std_logic;							-- reset key
		SW: IN std_logic_vector (17 downto 0); 		-- switches
		VGA_CLK:OUT std_logic;			-- 
		VGA_HS: OUT std_logic;						-- VGA H_SYNC
		VGA_VS:OUT std_logic;						-- VGA V_SYNC
		VGA_BLANK:OUT std_logic;					-- VGA BLANK
		VGA_SYNC:OUT std_logic;					 	-- VGA SYNC
		VGA_R: OUT std_logic_vector(9 downto 0);	-- VGA Red[9:0]
		VGA_G: OUT std_logic_vector(9 downto 0);	-- VGA Green[9:0]
		VGA_B: OUT std_logic_vector(9 downto 0)	-- VGA Blue[9:0]
	);
end entity;

architecture vgaarch of vga is
component VGA is port(
	--Host Side
	iRed,
	iGreen,
	iBlue : IN std_logic_vector (9 downto 0);
	oRequest : OUT std_logic;
	--VGA Side
	oVGA_R,
	oVGA_G,
	oVGA_B : OUT std_logic_vector (9 downto 0);
	oVGA_H_SYNC,
	oVGA_V_SYNC,
	oVGA_SYNC,
	oVGA_BLANK,
	oVGA_CLOCK : OUT std_logic;
	--Control Signal
	iCLK,
	iRST_N : IN std_logic
);
end component;
signal red,blue,green: std_logic_vector (9 downto 0);
signal VGA_CTRL_CLK,read: std_logic;
begin
-- GENERATE PIXELS
Red<=sw;
-- GENERATE CLOCK
process (CLOCK_50,reset)
begin
	if(reset='0')then
		VGA_CTRL_CLK<='1';
	else
		if(CLOCK_50='1') then
			VGA_CTRL_CLK<= not VGA_CTRL_CLK;
		end if;
	end if;
end process;
-- VGA COMPONENT
 VGA1: VGA port map(oRequest=>Read,
					iRed=>Red,
					iGreen=>red,
					iBlue=>red,
					oVGA_R=>VGA_R,
					oVGA_G=>VGA_G,
					oVGA_B=>VGA_B,
					oVGA_H_SYNC=>VGA_HS,
					oVGA_V_SYNC=>VGA_VS,
					oVGA_SYNC=>VGA_SYNC,
					oVGA_BLANK=>VGA_BLANK,
					iCLK=>VGA_CTRL_CLK,
					iRST_N=>reset);
end vgaarch;